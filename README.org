Here’s a more comprehensive README.md including additional sections on similar projects and inspirations:

auto-virtualenv

Auto Virtualenv is an Emacs package that automatically activates Python virtual environments based on the project you’re working on. By integrating seamlessly with projectile, it enables quick, efficient environment activation across multiple Python projects, reducing manual setup and enhancing productivity.

This package is especially useful for developers who frequently switch between Python projects, as it identifies project-specific virtual environments, both local and global, and activates them without requiring manual input.

Key Features

    •	Automatic Environment Detection: Automatically identifies and activates Python virtual environments.
    •	Local and Global Virtualenv Support: Recognizes both local .venv directories within projects and global environments stored in directories like ~/.pyenv/versions/.
    •	Project-Specific Modeline: Displays the active virtual environment in the modeline, or shows “Venv: N/A” if none is found.
    •	Configurable Project Indicators: Allows customization of project indicator files to restrict virtualenv activation to Python projects only.
    •	Smooth Emacs Experience: Minimizes modeline updates and redundant checks for a more responsive editing experience.

Installation

You can install auto-virtualenv from MELPA once available, or download auto-virtualenv.el directly and add it to your Emacs load path.

MELPA (recommended)

To install auto-virtualenv from MELPA:

M-x package-install RET auto-virtualenv RET

Manual Installation

    1.	Download auto-virtualenv.el and place it in a directory of your choice.
    2.	Add the directory to your load-path in your init.el and require auto-virtualenv:

(add-to-list 'load-path "/path/to/auto-virtualenv/")
(require 'auto-virtualenv)



Using use-package

(use-package auto-virtualenv
  :ensure t
  :custom
  (auto-virtualenv-verbose t)
  :config
  (auto-virtualenv-setup))

Using straight.el

(straight-use-package
 '(auto-virtualenv :type git :host github :repo "marcwebbie/auto-virtualenv"))

(use-package auto-virtualenv
  :custom
  (auto-virtualenv-verbose t)
  :config
  (auto-virtualenv-setup))

Configuration

Key Customizations

auto-virtualenv can be customized to suit various workflows. Here are some of the main options:

    •	Global Virtualenv Directories: Define paths to search for global environments, ensuring easy integration with virtualenv managers like pyenv.

(setq auto-virtualenv-global-dirs '("~/.virtualenvs/" "~/.pyenv/versions/"))


    •	Python Project Indicators: Add or remove files that identify a Python project. Only projects containing these files will trigger virtual environment activation.

(setq auto-virtualenv-python-project-files
      '("requirements.txt" "Pipfile" "pyproject.toml" "setup.py"))


    •	Activation Hooks: Control when environments should activate automatically. Adjust hooks based on personal workflow.

(setq auto-virtualenv-activation-hooks
      '(projectile-after-switch-project-hook find-file-hook))


    •	Verbose Mode: Enable detailed output for debugging.

(setq auto-virtualenv-verbose t)



Example: Customizing Activation for Specific Projects

To restrict activation to certain projects, use auto-virtualenv-skip-projects:

(setq auto-virtualenv-skip-projects '("~/.emacs.d" "~/Documents/NonPythonProject"))

Tips for Smooth Use

    •	Avoid Frequent Modeline Updates: auto-virtualenv minimizes modeline changes to maintain performance.
    •	Global Directory Setup: Ensure that your global virtualenv paths are correctly configured to avoid redundant environment searches.

Similar Projects and Inspirations

auto-virtualenv was inspired by other great tools in the Emacs and Python ecosystem:

    •	pyvenv: Provides manual activation for Python virtual environments, allowing users to switch between virtual environments manually or use workon environments defined by virtualenvwrapper. auto-virtualenv differs by focusing on fully automated environment detection and activation.
    •	direnv: Although not Emacs-specific, direnv automatically loads and unloads environment variables based on .envrc files in directories, providing a similar automated approach to environmental context switching.
    •	projectile: auto-virtualenv leverages projectile for project detection, making it more efficient at handling multi-project workflows by activating environments only when relevant files are detected.
    •	autoenv: An automatic environment loader for shell environments, it shares a similar philosophy with auto-virtualenv for Emacs, automatically adapting environments based on directory context.

These tools informed the design of auto-virtualenv, particularly in automated activation, minimal user configuration, and compatibility with multi-environment setups.

Contributing

Contributions, bug reports, and feature requests are welcome! Please feel free to open an issue or submit a pull request on GitHub.

License

auto-virtualenv is available under the MIT License. See the LICENSE file for more details.
